// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShepherdsPies.Data;

#nullable disable

namespace ShepherdsPies.Migrations
{
    [DbContext(typeof(ShepherdsPiesDbContext))]
    [Migration("20230927151126_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "1c77f02b-7b36-4cb9-aeda-f10705fd1edc",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93b41233-ed30-4520-baac-b353a15eece6",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBhxsgObiPj7PDbWbzmmM8YQUTNlE5sOnQY5xcXdeRJYaNhVn9Ne+gVt59tNvlCilA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ee432ef-1358-4073-b28b-9c8026917dad",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "5b795ef4-89bd-4de6-b6e1-6bb3dc469242",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f28b805-1e02-400d-85ba-eba5945d8c7b",
                            Email = "jdfitz@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP4ZxQmDYSSOb+bSQqMIjsGkxewb+DnSdmcqszHxET18aZjGHkI4aOFW2IcYx8ixyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1839e41c-790c-4112-994e-bdd68ec0e002",
                            TwoFactorEnabled = false,
                            UserName = "jdfitz"
                        },
                        new
                        {
                            Id = "e53af84d-c3d0-4db8-9a6a-680985b82553",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1198516a-cfa2-480f-94a1-b16968047e00",
                            Email = "greg@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKuqR1jDakaF7zIpdKvwPOShEsmQqQEpeeaKGt3uq+Id/PNWFG7ik/WbTGmYQmrOEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8cfff55-48fa-4eb7-bf82-3a6087b28076",
                            TwoFactorEnabled = false,
                            UserName = "greg"
                        },
                        new
                        {
                            Id = "6245ffde-88da-4745-bd81-32943de1fa00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1fef0a7-0ef3-4099-b785-27a66d0f2c69",
                            Email = "jbarton@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKkcKFcebbJbR4FDSh+GYS6cgCDUyBRTRwzTAF76dG41HWTLigTuJP936c/eUS8oLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83e378ed-1bb7-4ecc-a19b-8f8cae09050f",
                            TwoFactorEnabled = false,
                            UserName = "jbarton"
                        },
                        new
                        {
                            Id = "8fe414ed-22f8-4dd5-8cde-f5bcf922cec0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c29277e-a82d-4554-a358-942f8ec443e7",
                            Email = "calebs@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL3mjlnwkpraNl2asOBNi6DJpg9M71R3W5MYJJclaIqbwxshwr8brd83VeFiLP/GRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "111b33d9-c0f4-4e8c-aaa7-8e32b55d4557",
                            TwoFactorEnabled = false,
                            UserName = "csullivan"
                        },
                        new
                        {
                            Id = "075aa239-f0fa-46d7-8cb5-223d4064e582",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3e3cbb4-b7a9-4ed8-9eb8-933272c37f99",
                            Email = "joshb@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAJLKvO549VLEbv2+PvVPv7+B2sDlOccZi7IV0qgPce8+Ne0dvQeKAq0hF8BWXwLEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c5d99a0-852e-4242-a349-86836960b1af",
                            TwoFactorEnabled = false,
                            UserName = "joshb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShepherdsPies.Models.Cheese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cheeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Mozzarella"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Buffalo Mozzarella"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Four Cheese"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Vegan"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Parmesan"
                        },
                        new
                        {
                            Id = 6,
                            Type = "None (Cheeseless)"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TableNumber")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Tipped")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 2,
                            OrderDate = new DateTime(2023, 9, 16, 17, 30, 50, 0, DateTimeKind.Unspecified),
                            TableNumber = 3,
                            Tipped = 6.80m
                        },
                        new
                        {
                            Id = 2,
                            DriverId = 4,
                            EmployeeId = 2,
                            OrderDate = new DateTime(2023, 9, 16, 18, 25, 22, 0, DateTimeKind.Unspecified),
                            Tipped = 11m
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 3,
                            OrderDate = new DateTime(2023, 9, 17, 12, 4, 35, 0, DateTimeKind.Unspecified),
                            TableNumber = 6
                        },
                        new
                        {
                            Id = 4,
                            DriverId = 5,
                            EmployeeId = 6,
                            OrderDate = new DateTime(2023, 9, 18, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            Tipped = 8.75m
                        },
                        new
                        {
                            Id = 5,
                            DriverId = 4,
                            EmployeeId = 5,
                            OrderDate = new DateTime(2023, 9, 18, 13, 48, 37, 0, DateTimeKind.Unspecified),
                            Tipped = 4.95m
                        },
                        new
                        {
                            Id = 6,
                            EmployeeId = 4,
                            OrderDate = new DateTime(2023, 9, 18, 15, 22, 58, 0, DateTimeKind.Unspecified),
                            TableNumber = 1,
                            Tipped = 12m
                        },
                        new
                        {
                            Id = 7,
                            EmployeeId = 5,
                            OrderDate = new DateTime(2023, 9, 20, 11, 7, 47, 0, DateTimeKind.Unspecified),
                            TableNumber = 2
                        },
                        new
                        {
                            Id = 8,
                            DriverId = 6,
                            EmployeeId = 3,
                            OrderDate = new DateTime(2023, 9, 22, 12, 34, 51, 0, DateTimeKind.Unspecified),
                            Tipped = 8.55m
                        },
                        new
                        {
                            Id = 9,
                            DriverId = 5,
                            EmployeeId = 2,
                            OrderDate = new DateTime(2023, 9, 22, 14, 41, 8, 0, DateTimeKind.Unspecified),
                            Tipped = 6.39m
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CheeseId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("SauceId")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheeseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SauceId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheeseId = 1,
                            OrderId = 1,
                            SauceId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 2,
                            CheeseId = 2,
                            OrderId = 2,
                            SauceId = 5,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CheeseId = 5,
                            OrderId = 2,
                            SauceId = 3,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CheeseId = 4,
                            OrderId = 3,
                            SauceId = 4,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CheeseId = 6,
                            OrderId = 4,
                            SauceId = 2,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 6,
                            CheeseId = 2,
                            OrderId = 4,
                            SauceId = 4,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 7,
                            CheeseId = 1,
                            OrderId = 5,
                            SauceId = 3,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 8,
                            CheeseId = 3,
                            OrderId = 6,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 9,
                            CheeseId = 4,
                            OrderId = 6,
                            SauceId = 5,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 10,
                            CheeseId = 3,
                            OrderId = 6,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 11,
                            CheeseId = 5,
                            OrderId = 7,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 12,
                            CheeseId = 1,
                            OrderId = 8,
                            SauceId = 2,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 13,
                            CheeseId = 6,
                            OrderId = 8,
                            SauceId = 3,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CheeseId = 1,
                            OrderId = 9,
                            SauceId = 3,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 15,
                            CheeseId = 2,
                            OrderId = 9,
                            SauceId = 1,
                            SizeId = 3
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.PizzaTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ToppingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaToppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PizzaId = 1,
                            Quantity = 8,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 2,
                            PizzaId = 1,
                            Quantity = 8,
                            ToppingId = 8
                        },
                        new
                        {
                            Id = 3,
                            PizzaId = 1,
                            Quantity = 8,
                            ToppingId = 9
                        },
                        new
                        {
                            Id = 4,
                            PizzaId = 2,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 5,
                            PizzaId = 3,
                            Quantity = 11,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 6,
                            PizzaId = 3,
                            Quantity = 7,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 7,
                            PizzaId = 4,
                            Quantity = 9,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 8,
                            PizzaId = 5,
                            Quantity = 12,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 9,
                            PizzaId = 5,
                            Quantity = 15,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 10,
                            PizzaId = 5,
                            Quantity = 7,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 11,
                            PizzaId = 6,
                            Quantity = 7,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 12,
                            PizzaId = 6,
                            Quantity = 4,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 13,
                            PizzaId = 7,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 14,
                            PizzaId = 8,
                            Quantity = 11,
                            ToppingId = 11
                        },
                        new
                        {
                            Id = 15,
                            PizzaId = 9,
                            Quantity = 12,
                            ToppingId = 8
                        },
                        new
                        {
                            Id = 16,
                            PizzaId = 9,
                            Quantity = 10,
                            ToppingId = 10
                        },
                        new
                        {
                            Id = 17,
                            PizzaId = 10,
                            Quantity = 5,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 18,
                            PizzaId = 11,
                            Quantity = 6,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 19,
                            PizzaId = 11,
                            Quantity = 8,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 20,
                            PizzaId = 11,
                            Quantity = 7,
                            ToppingId = 6
                        },
                        new
                        {
                            Id = 21,
                            PizzaId = 12,
                            Quantity = 8,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 22,
                            PizzaId = 12,
                            Quantity = 9,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 23,
                            PizzaId = 13,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 24,
                            PizzaId = 14,
                            Quantity = 10,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 25,
                            PizzaId = 15,
                            Quantity = 7,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 26,
                            PizzaId = 15,
                            Quantity = 8,
                            ToppingId = 3
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Marinara"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Arrabbiata"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Garlic White"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Pesto"
                        },
                        new
                        {
                            Id = 5,
                            Type = "None (Sauceless)"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 10.00m,
                            Length = "10\"",
                            Name = "Small"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 12.00m,
                            Length = "14\"",
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 15.00m,
                            Length = "18\"",
                            Name = "Large"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pepperoni"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sausage"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mushroom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Onion"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green Pepper"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black Olive"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Basil"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bacon"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Spinach"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pineapple"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Extra Cheese"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "132 Main Street",
                            FirstName = "JD",
                            IdentityUserId = "5b795ef4-89bd-4de6-b6e1-6bb3dc469242",
                            LastName = "Fitzmartin"
                        },
                        new
                        {
                            Id = 3,
                            Address = "523 Ocean Ave",
                            FirstName = "Greg",
                            IdentityUserId = "e53af84d-c3d0-4db8-9a6a-680985b82553",
                            LastName = "Korte"
                        },
                        new
                        {
                            Id = 4,
                            Address = "636 Palm Street",
                            FirstName = "Josh",
                            IdentityUserId = "6245ffde-88da-4745-bd81-32943de1fa00",
                            LastName = "Barton"
                        },
                        new
                        {
                            Id = 5,
                            Address = "5345 Equador Way",
                            FirstName = "Caleb",
                            IdentityUserId = "8fe414ed-22f8-4dd5-8cde-f5bcf922cec0",
                            LastName = "Sullivan"
                        },
                        new
                        {
                            Id = 6,
                            Address = "643 Palm Street",
                            FirstName = "Josh",
                            IdentityUserId = "075aa239-f0fa-46d7-8cb5-223d4064e582",
                            LastName = "Baugh"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.HasOne("ShepherdsPies.Models.UserProfile", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("ShepherdsPies.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.HasOne("ShepherdsPies.Models.Cheese", "Cheese")
                        .WithMany()
                        .HasForeignKey("CheeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Order", "Order")
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Sauce", "Sauce")
                        .WithMany()
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheese");

                    b.Navigation("Order");

                    b.Navigation("Sauce");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShepherdsPies.Models.PizzaTopping", b =>
                {
                    b.HasOne("ShepherdsPies.Models.Pizza", "Pizza")
                        .WithMany("PizzaToppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.Navigation("PizzaToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
